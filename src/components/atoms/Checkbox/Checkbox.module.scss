@use "../../../styles/_tokens.scss" as *;

/* Removed container to avoid background/hover behind checkbox */

.checkboxLabelGroup {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: var(--spacing-sm);
  align-items: center;
  flex-shrink: 0;
  min-height: 20px; // Ensure consistent height for alignment
}

.checkboxInput {
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
  margin: 0;
  padding: 0;
  pointer-events: none;
  z-index: -1;
}

.checkbox {
  position: relative;
  width: calc(var(--spacing-md) * 1.25);
  height: calc(var(--spacing-md) * 1.25);
  border: var(--border-width-thin) solid var(--color-border-secondary);
  border-radius: var(--radius-sm);
  background-color: var(--color-surface);
  transition: all var(--motion-transition-normal) cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  cursor: pointer;
  user-select: none;
  transform: scale(1);
  overflow: hidden;

  // Subtle scale animation on hover
  &:hover:not(.disabled) {
    background-color: var(--color-surface-secondary);
    border-color: var(--color-border-primary);
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  // Active state animation
  &:active:not(.disabled) {
    transform: scale(0.95);
    transition: transform 0.1s ease;
  }

  // Focus state with subtle glow
  &:focus-visible {
    outline: var(--border-width-thin) solid var(--color-border-focus);
    outline-offset: var(--spacing-xs);
    border-radius: var(--radius-sm);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.05);
  }

  &.disabled {
    cursor: not-allowed;
    transform: scale(1);
    transition: opacity var(--motion-transition-normal) ease;
    background-color: var(--color-surface-4);
    border-color: var(--color-border-secondary);
  }

  &.error {
    border-color: var(--color-error);
    animation: shake 0.5s ease-in-out;

    &:hover:not(.disabled) {
      border-color: var(--color-error);
    }
  }

  // Size variants
  &.size-sm {
    width: calc(var(--spacing-sm) * 1.5);
    height: calc(var(--spacing-sm) * 1.5);
  }

  &.size-md {
    width: calc(var(--spacing-md) * 1.25);
    height: calc(var(--spacing-md) * 1.25);
  }

  &.size-lg {
    width: calc(var(--spacing-lg) * 1.25);
    height: calc(var(--spacing-lg) * 1.25);
  }

  &.checked {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
    animation: checkmark 0.3s cubic-bezier(0.4, 0, 0.2, 1);

    &:hover:not(.disabled) {
      background-color: var(--color-primary-hover, var(--color-primary));
      border-color: var(--color-primary-hover, var(--color-primary));
    }

    // Icon animation when checked
    svg {
      animation: iconPop 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }

  // Ensure disabled takes precedence even when checked
  &.checked.disabled {
    background-color: var(--color-surface-4);
    border-color: var(--color-border-secondary);
  }

  // Ensure error border takes precedence even when checked
  &.checked.error {
    border-color: var(--color-error);
    background-color: var(--color-surface);

    // Hide check icon to visually force unchecked state
    svg {
      transform: scale(0);
      opacity: 0;
    }

    &:hover:not(.disabled) {
      border-color: var(--color-error);
      background-color: var(--color-surface-secondary);
    }
  }

  // Icon styling with animations
  svg {
    color: white !important;
    stroke-width: 2;
    width: 60%;
    height: 60%;
    fill: white;
    transition: all var(--motion-transition-normal) ease;
    transform: scale(0);
    opacity: 0;
  }

  // Ensure icon is white when checked
  &.checked svg {
    color: white !important;
    fill: white;
    transform: scale(1);
    opacity: 1;
  }

  // Override any inherited colors from parent elements
  .icon {
    color: white !important;
  }

  // Ensure the check icon is always white
  .icon svg {
    color: white !important;
    fill: white;
  }
}

.label {
  cursor: pointer;
  color: var(--color-text-primary);
  font-weight: var(--font-weight-medium);
  line-height: 1.4;
  user-select: none;
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  margin: 0;
  padding: 0;
  min-height: 20px; // Match checkbox height for perfect alignment
  transition: color var(--motion-transition-normal) ease;

  &:hover:not(.disabled) {
    color: var(--color-text-primary-hover, var(--color-primary));
  }

  &.disabled {
    cursor: not-allowed;
    color: var(--color-text-disabled);
    opacity: 1;
  }

  // Size variants
  &.size-sm {
    font-size: var(--font-size-sm);
    line-height: var(--line-height-sm);
  }

  &.size-md {
    font-size: var(--font-size-md);
    line-height: var(--line-height-md);
  }

  &.size-lg {
    font-size: var(--font-size-lg);
    line-height: var(--line-height-lg);
  }
}

.required {
  color: var(--color-error);
  margin-left: var(--spacing-xs);
}

.errorMessage {
  margin-top: var(--spacing-xs);
  color: var(--color-error);
  font-size: var(--font-size-sm);
  line-height: 1.4;
  flex-basis: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);

  // Size variants
  &.size-sm {
    font-size: var(--font-size-xs);
    line-height: var(--line-height-xs);
  }

  &.size-md {
    font-size: var(--font-size-sm);
    line-height: var(--line-height-sm);
  }

  &.size-lg {
    font-size: var(--font-size-md);
    line-height: var(--line-height-md);
  }
}

// Keyframe animations
@keyframes checkmark {
  0% {
    transform: scale(1);
    background-color: var(--color-surface);
    border-color: var(--color-border-secondary);
  }
  50% {
    transform: scale(1.1);
    background-color: var(--color-primary);
    border-color: var(--color-primary);
  }
  100% {
    transform: scale(1);
    background-color: var(--color-primary);
    border-color: var(--color-primary);
  }
}

@keyframes iconPop {
  0% {
    transform: scale(0);
    opacity: 0;
  }
  50% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-2px);
  }
  75% {
    transform: translateX(2px);
  }
}

// Smooth transition for unchecked state
.checkbox:not(.checked) svg {
  transition: all var(--motion-transition-normal) ease;
  transform: scale(0);
  opacity: 0;
}

// Enhanced hover effects
.checkbox:hover:not(.disabled):not(.checked) {
  transform: scale(1.05);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.checkbox:hover:not(.disabled).checked {
  transform: scale(1.05);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
}
