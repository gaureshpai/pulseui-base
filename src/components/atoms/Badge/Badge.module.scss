@use "../../../styles/_tokens.scss" as *;

.badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-xs);
  font-family: var(--font-family);
  font-weight: var(--font-weight-bold);
  text-transform: uppercase;
  border-radius: var(--radius-full);
  transition: var(--motion-transition-fast);
  cursor: default;
  border: none;
  background: none;
  padding: 0;
  margin: 0;
  text-decoration: none;
  white-space: nowrap;
  user-select: none;

  &:hover:not(.disabled) {
    transition: var(--motion-transition-fast);
  }

  &.disabled {
    opacity: var(--opacity-50);
    cursor: not-allowed;
    pointer-events: none;
  }

  &.clickable {
    cursor: pointer;
  }
}

// Size variants
.size-xs {
  padding: calc(var(--spacing-xs) / 2) var(--spacing-xs);
  font-size: var(--font-size-xs);
  line-height: var(--line-height-xs);
  min-height: 20px;
  gap: calc(var(--spacing-xs) / 2);

  .dot {
    width: 6px;
    height: 6px;
  }
}

.size-sm {
  padding: calc(var(--spacing-xs) / 2) var(--spacing-sm);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-sm);
  min-height: 24px;
  gap: var(--spacing-xs);

  .dot {
    width: 8px;
    height: 8px;
  }
}

.size-md {
  padding: var(--spacing-xs) var(--spacing-md);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-sm);
  min-height: 28px;
  gap: var(--spacing-xs);

  .dot {
    width: 8px;
    height: 8px;
  }
}

.size-lg {
  padding: var(--spacing-sm) var(--spacing-lg);
  font-size: var(--font-size-md);
  line-height: var(--line-height-md);
  min-height: 32px;
  gap: var(--spacing-sm);

  .dot {
    width: 10px;
    height: 10px;
  }
}

.size-xl {
  padding: var(--spacing-md) var(--spacing-xl);
  font-size: var(--font-size-lg);
  line-height: var(--line-height-lg);
  min-height: 40px;
  gap: var(--spacing-md);

  .dot {
    width: 12px;
    height: 12px;
  }
}

// Variant styles
.variant-dot {
  background-color: var(--color-badge-primary, var(--color-blue-8));
  color: var(--color-white);
  border: var(--border-width-thin) solid
    var(--color-badge-primary, var(--color-blue-8));

  &:hover:not(.disabled) {
    background-color: var(--color-badge-primary-hover, var(--color-blue-9));
    border-color: var(--color-badge-primary-hover, var(--color-blue-9));
  }

  &:active:not(.disabled) {
    background-color: var(--color-badge-primary-active, var(--color-blue-7));
    border-color: var(--color-badge-primary-active, var(--color-blue-7));
  }

  .dot {
    background-color: var(--color-white);
    border-radius: 50%;
    flex-shrink: 0;
  }
}

.variant-filled {
  background-color: var(--color-badge-primary, var(--color-blue-8));
  color: var(--color-white);
  border: var(--border-width-thin) solid
    var(--color-badge-primary, var(--color-blue-8));

  &:hover:not(.disabled) {
    background-color: var(--color-badge-primary-hover, var(--color-blue-9));
    border-color: var(--color-badge-primary-hover, var(--color-blue-9));
  }

  &:active:not(.disabled) {
    background-color: var(--color-badge-primary-active, var(--color-blue-7));
    border-color: var(--color-badge-primary-active, var(--color-blue-7));
  }
}

.variant-subtle {
  background-color: var(--color-surface-secondary);
  border: var(--border-width-thin) solid var(--color-surface-secondary);
  color: var(--color-text-primary);

  &:hover:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-surface-tertiary);
  }

  &:active:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-surface-tertiary);
  }
}

.variant-light {
  background-color: var(--color-surface-secondary);
  border: var(--border-width-thin) solid var(--color-border-secondary);
  color: var(--color-text-primary);

  &:hover:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-border-primary);
  }

  &:active:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-border-primary);
  }
}

.variant-outline {
  background-color: transparent;
  color: var(--color-text-primary);
  border: 1px solid var(--color-border-secondary);

  &:hover:not(.disabled) {
    background-color: var(--color-surface-secondary);
    border-color: var(--color-border-primary);
  }

  &:active:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-border-primary);
  }
}

.variant-white {
  background-color: var(--color-surface);
  color: var(--color-text-primary);
  border: var(--border-width-thin) solid var(--color-border-secondary);

  &:hover:not(.disabled) {
    background-color: var(--color-surface-secondary);
    border-color: var(--color-border-primary);
  }

  &:active:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-border-primary);
  }
}

.variant-default {
  background-color: var(--color-surface);
  color: var(--color-text-primary);
  border: 1px solid var(--color-border-secondary);

  &:hover:not(.disabled) {
    background-color: var(--color-surface-secondary);
    border-color: var(--color-border-primary);
  }

  &:active:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    border-color: var(--color-border-primary);
  }
}

// State styles
.state-hover {
  &:not(.disabled) {
    // Interactive hover (was @include interactive-hover)
    cursor: pointer;
    user-select: none;
    transition: all var(--motion-duration-normal) var(--motion-easing-ease-out);

    &:hover:not(:disabled) {
      transform: var(--transform-hover);
      box-shadow: var(--shadow-hover);
    }
  }
}

.state-disabled {
  // Disabled state (was @include disabled)
  opacity: var(--opacity-50);
  cursor: not-allowed;
  pointer-events: none;
}

// Content styling
.content {
  display: inline-block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: inherit;
  align-self: center;
  font-weight: inherit;
  text-transform: inherit;
}

// Icon styles
.left,
.right {
  flex-shrink: 0;
  // Flex center (was @include flex-center)
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0;
  padding: 0;

  // Remove any padding from the icon component itself
  :global(.MuiSvgIcon-root) {
    padding: 0 !important;
  }

  // Target any SVG elements directly
  svg {
    padding: 0 !important;
  }

  // Override the Icon component's padding
  :global(.icon) {
    padding: 0 !important;
  }

  // Override all size variants of the Icon component
  :global(.icon.size-xs),
  :global(.icon.size-sm),
  :global(.icon.size-md),
  :global(.icon.size-lg),
  :global(.icon.size-xl) {
    padding: 0 !important;
  }

  // Target the dynamically generated icon class pattern
  :global([class*="_icon_"]) {
    padding: 0 !important;
  }

  // Target any element with icon in the class name
  :global([class*="icon"]) {
    padding: 0 !important;
  }

  // Specific override for the Icon component's CSS module class
  // This targets the exact pattern: ._icon_[hash]
  :global([class^="_icon_"]) {
    padding: 0 !important;
  }

  // Additional override for any class that starts with underscore and contains icon
  :global([class^="_"][class*="icon"]) {
    padding: 0 !important;
  }
}

// Dot styling
.dot {
  flex-shrink: 0;
  display: inline-block;
  border-radius: 50%;
  margin-right: var(--spacing-xs);
}
