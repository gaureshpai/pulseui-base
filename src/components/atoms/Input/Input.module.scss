@use "../../../styles/_tokens.scss" as *;

.inputWrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  width: 100%;
}

.input {
  width: 100%;
  border: none;
  outline: none;
  background: transparent;
  font-family: var(--font-family);
  transition: none;
  border-radius: var(--radius-md);

  // Remove default browser styles
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  &[type="number"] {
    -moz-appearance: textfield;
  }

  // Placeholder styles
  &::placeholder {
    color: var(--color-input-placeholder);
    opacity: 1;
  }

  // Focus outline
  &:focus {
    outline: none;
  }
}

// Variant styles
.variant-default {
  border: var(--border-width-thin) solid var(--color-input-border);
  background-color: var(--color-input-background);
  color: var(--color-input-text);

  &:hover:not(.disabled) {
    border-color: var(--color-input-border-focus);
    transition: none;
  }

  &:focus {
    border-color: var(--color-input-border-focus);
    box-shadow: 0 0 0 var(--border-width-thin) var(--color-border-focus);
    transition: none;
  }

  &.error {
    border-color: var(--color-error);

    &:focus {
      border-color: var(--color-error);
      box-shadow: 0 0 0 var(--border-width-thin) var(--color-error);
      transition: none;
    }
  }
}

.variant-filled {
  border: var(--border-width-thin) solid transparent;
  background-color: var(--color-surface-secondary);
  color: var(--color-input-text);

  &:hover:not(.disabled) {
    background-color: var(--color-surface-tertiary);
    transition: none;
  }

  &:focus {
    background-color: var(--color-input-background);
    border-color: var(--color-input-border-focus);
    box-shadow: none;
    transition: none;
  }

  &.error {
    background-color: var(--color-error);
    border-color: var(--color-error);

    &:focus {
      background-color: var(--color-input-background);
      border-color: var(--color-error);
      box-shadow: 0 0 0 var(--border-width-normal) var(--color-error);
      transition: none;
    }
  }
}

.variant-unstyled {
  border: none;
  background-color: transparent;
  color: var(--color-input-text);

  &:hover:not(.disabled) {
    transition: none;
  }

  &:focus {
    transition: none;
  }

  &.error {
    border-color: var(--color-error);

    &:focus {
      border-color: var(--color-error);
      transition: none;
    }
  }
}

// Size variants
.size-sm {
  padding: var(--spacing-xs) var(--spacing-sm);
  padding-left: var(--spacing-sm);
  padding-right: var(--spacing-sm);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-sm);
  min-height: 32px;
}

.size-md {
  padding: var(--spacing-sm) var(--spacing-md);
  padding-left: var(--spacing-md);
  padding-right: var(--spacing-md);
  font-size: var(--font-size-md);
  line-height: var(--line-height-md);
  min-height: 40px;
}

.size-lg {
  padding: var(--spacing-md) var(--spacing-lg);
  padding-left: var(--spacing-lg);
  padding-right: var(--spacing-lg);
  font-size: var(--font-size-lg);
  line-height: var(--line-height-lg);
  min-height: 48px;
}

.size-xl {
  padding: var(--spacing-lg) var(--spacing-xl);
  padding-left: var(--spacing-xl);
  padding-right: var(--spacing-xl);
  font-size: var(--font-size-xl);
  line-height: var(--line-height-xl);
  min-height: 56px;
}

// State styles
.state-enabled {
  // Default state - no additional styles
}

.state-focus {
  // Apply focus styles when state is set to "focus"
  &.variant-default {
    border-color: var(--color-input-border-focus);
    box-shadow: none;
  }

  &.variant-filled {
    background-color: var(--color-input-background);
    border-color: var(--color-input-border-focus);
    box-shadow: none;
  }

  &.variant-unstyled {
    background-color: var(--color-surface-secondary);
  }
}

.state-typing {
  // Typing state - no additional styles needed
}

.state-filled {
  // Filled state - no additional styles needed
}

.state-error {
  // Error state styling
  &.variant-default {
    border-color: var(--color-error);
    color: var(--color-error);

    &::placeholder {
      color: var(--color-error);
    }
  }

  &.variant-filled {
    background-color: var(--color-error);
    border-color: var(--color-error);
    color: var(--color-error);

    &::placeholder {
      color: var(--color-error);
    }
  }

  &.variant-unstyled {
    color: var(--color-error);
  }
}

.state-disabled {
  // Disabled state styling
  &.variant-default {
    background-color: var(--color-surface-secondary);
    border-color: var(--color-border-secondary);
    color: var(--color-text-disabled);
    opacity: var(--opacity-50);

    &::placeholder {
      color: var(--color-text-disabled);
    }
  }

  &.variant-filled {
    background-color: var(--color-surface-secondary);
    color: var(--color-text-disabled);
    opacity: var(--opacity-50);

    &::placeholder {
      color: var(--color-text-disabled);
    }
  }

  &.variant-unstyled {
    color: var(--color-text-disabled);
    opacity: var(--opacity-50);
  }
}

// Error state
.error {
  &.variant-default {
    border-color: var(--color-red-6);
    color: var(--color-red-6);

    &::placeholder {
      color: var(--color-red-6);
    }
  }

  &.variant-filled {
    background-color: var(--color-red-1);
    border-color: var(--color-red-6);
    color: var(--color-red-6);

    &::placeholder {
      color: var(--color-red-6);
    }
  }

  &.variant-unstyled {
    color: var(--color-red-6);

    &::placeholder {
      color: var(--color-red-6);
    }
  }
}

// Disabled state
.disabled {
  opacity: var(--opacity-50);
  cursor: not-allowed;
  pointer-events: none;
}

// Readonly state
.readonly {
  cursor: default;

  &.variant-default {
    background-color: var(--color-surface-secondary);
  }

  &.variant-filled {
    background-color: var(--color-surface-tertiary);
  }
}

// Icon styles
.leftIcon,
.rightIcon {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--color-icon-muted);
  transition: none;
}

.leftIcon {
  left: var(--spacing-icon);
  pointer-events: none;
  padding: var(--spacing-xs);
}

.rightIcon {
  right: var(--spacing-icon);
  padding: var(--spacing-xs);
}

// Adjust padding when icons are present
.inputWrapper {
  &:has(.leftIcon) .input {
    padding-left: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
  }

  &:has(.rightIcon) .input {
    padding-right: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
  }

  &:has(.leftIcon):has(.rightIcon) .input {
    padding-left: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
    padding-right: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
  }
}

// Fallback for browsers that don't support :has()
.inputWrapper .input {
  &.has-left-icon {
    padding-left: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
  }

  &.has-right-icon {
    padding-right: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
  }

  &.has-left-icon.has-right-icon {
    padding-left: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
    padding-right: calc(
      var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
    );
  }
}

// Size-specific icon padding adjustments
.inputWrapper:has(.leftIcon) .input.size-sm {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-sm)
  );
}

.inputWrapper:has(.rightIcon) .input.size-sm {
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-sm)
  );
}

.inputWrapper:has(.leftIcon):has(.rightIcon) .input.size-sm {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-sm)
  );
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-sm)
  );
}

.inputWrapper:has(.leftIcon) .input.size-md {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
  );
}

.inputWrapper:has(.rightIcon) .input.size-md {
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
  );
}

.inputWrapper:has(.leftIcon):has(.rightIcon) .input.size-md {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
  );
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-md)
  );
}

.inputWrapper:has(.leftIcon) .input.size-lg {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-lg)
  );
}

.inputWrapper:has(.rightIcon) .input.size-lg {
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-lg)
  );
}

.inputWrapper:has(.leftIcon):has(.rightIcon) .input.size-lg {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-lg)
  );
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-lg)
  );
}

.inputWrapper:has(.leftIcon) .input.size-xl {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-xl)
  );
}

.inputWrapper:has(.rightIcon) .input.size-xl {
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-xl)
  );
}

.inputWrapper:has(.leftIcon):has(.rightIcon) .input.size-xl {
  padding-left: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-xl)
  );
  padding-right: calc(
    var(--spacing-icon) + var(--icon-size-md) + var(--spacing-xl)
  );
}

// Error state for icons
.error {
  .leftIcon,
  .rightIcon {
    color: var(--color-icon-error);
  }
}

// Focus state for icons
.input:focus {
  & ~ .leftIcon,
  & ~ .rightIcon {
    color: var(--color-icon-primary);
    transition: none;
  }
}

// Password toggle button
.passwordToggle {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: none;
  color: var(--color-icon-muted);

  &:hover:not(:disabled) {
    color: var(--color-icon-primary);
    transform: scale(1.02);
    transition: none;
  }

  &:active:not(:disabled) {
    transform: scale(0.98);
    transition: none;
  }

  &:disabled {
    opacity: var(--opacity-50);
    cursor: not-allowed;
  }

  &:focus {
    outline: var(--border-width-normal) solid var(--color-border-focus);
    outline-offset: var(--border-width-normal);
    border-radius: var(--radius-sm);
  }
}
